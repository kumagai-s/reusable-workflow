name: reuse-action

on:
  workflow_dispatch:
    inputs:

      target-env:
        description: 'Target env'
        required: true
        type: choice
        options:
          - prod
          - stag
          - test

concurrency: ${{ inputs.target-env }}

env:
  SECRET_VALUE: >
    ${{ 
      secrets[(
        (
          inputs.target-env == 'prod'
        ) 
        && 'SECRET_VALUE_PROD' || 
        (
          inputs.target-env == 'stag'
        ) 
        && 'SECRET_VALUE_STAG' || 'SECRET_VALUE_TEST'
      )]    
    }}

jobs:

  reuse-job1:
    runs-on: ubuntu-latest

    timeout-minutes: 10

    steps:
      - uses: ./.github/actions/reusable-action/action.yml@main
        with:
          arg1: ${{ fromJSON(vars.CONSTANTS)[inputs.target-env].job1.arg1 }}
          arg2: ${{ fromJSON(vars.CONSTANTS)[inputs.target-env].job1.arg2 }}
          arg3: ${{ fromJSON(vars.CONSTANTS)[inputs.target-env].job1.arg3 }}
        secrets:
          SECRET_VALUE: ${{ env.SECRET_VALUE }}

  reuse-job2:
    runs-on: ubuntu-latest

    if: inputs.eb-env-name == 'prod' || inputs.eb-env-name == 'stag'

    timeout-minutes: 10

    steps:
      - uses: ./.github/actions/reusable-action/action.yml@main
        with:
          arg1: ${{ fromJSON(vars.CONSTANTS)[inputs.target-env].job2.arg1 }}
          arg2: ${{ fromJSON(vars.CONSTANTS)[inputs.target-env].job2.arg2 }}
          arg3: ${{ fromJSON(vars.CONSTANTS)[inputs.target-env].job2.arg3 }}
        secrets:
          SECRET_VALUE: ${{ env.SECRET_VALUE }}

  reuse-job3:
    runs-on: ubuntu-latest

    timeout-minutes: 10

    steps:
      - uses: ./.github/actions/reusable-action/action.yml@main
        with:
          arg1: ${{ fromJSON(vars.CONSTANTS)[inputs.target-env].job3.arg1 }}
          arg2: ${{ fromJSON(vars.CONSTANTS)[inputs.target-env].job3.arg2 }}
          arg3: ${{ fromJSON(vars.CONSTANTS)[inputs.target-env].job3.arg3 }}
        secrets:
          SECRET_VALUE: ${{ env.SECRET_VALUE }}
          